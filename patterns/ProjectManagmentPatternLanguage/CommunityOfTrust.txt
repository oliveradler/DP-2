Community Of Trust

In high school, I went to music camp one year. During one orchestra rehearsal, my section was struggling with a particularly difficult passage. The conductor asked about it, and I said, "Don't worry. We will have it tomorrow." He said, "Ok," and continued with the rehearsal. By the next day, we had indeed learned the passage.




... once an organization has been established, interpersonal relationships have a significant positive or negative impact on the effectiveness of the team.

✥ ✥ ✥

It is essential that the people in a team trust each other, otherwise, it will be difficult to get anything done.

Communication is essential to the smooth working of any team; for example, software developers must constantly talk to each other to coordinate interfaces, builds, and tests. If individuals do not trust each other, communication will not be smooth. 

If people do not trust each other, they will spend time in defensive mode. For example, if I don't believe you will provide me a certain interface on time, I might go to great lengths to code around it, costing extra work and time. 
Design reviews can foment distrust. All too often, design reviews are contests among the reviewers to show who is more clever, and thus do not provide helpful suggestions to the designer. One alternative is for people to put on their best social behavior in reviews, but that dampens the energetic discussions that lead to the best insights in group discussions. 

The organization might have policies that smell of distrust: one may have to jump through hoops to be allowed to submit code to the project base. 

The perception of trust or mistrust is the reality, regardless of the intention. 

Therefore:

Do things that explicitly demonstrate trust, so it is obvious. Managers, for example, should make it overtly obvious that they are at the side of the organization, rather than playing a central role that controls people to do what must be done. Take visible actions to give developers control over the process.

The key here is that the actions must be visible and obvious, particularly if they are removing onerous rules and processes. Shortly before I went to work at a certain company, the company dispensed with time clocks for research and development personnel. My co-workers spoke fondly of the time clock smashing ceremony they had. 


✥ ✥ ✥

This is different from the oft-cited "empowerment" strategy. Empowerment is a conscious abdication of control to lower levels (see TheOpenClosedPrincipleOfTeams). In a CommunityOfTrust, progress is more often made by bilateral agreement than by unilateral directions. If people feel they have a voice and have influence over decisions, they are more likely to trust those who make the decisions. By the same token, they are likely to be more responsive in carrying out responsibilities they have committed to themselves over responsibilities that have been "given" to them. In fact, you can't give someone responsibility; you can only give someone accountability. Responsibility is taken, not given. One of the most demoralizing things a manager can do is to give accountability in the absence of responsibility. 

You need trust between the customer and all team members to lay out project plans that extend from SizeTheSchedule in the ProjectManagementPatternLanguage. The same is true for role differentiation; giving everyone pride and individuality can contribute to trust, as in SizeTheOrganization and its subtending patterns in the PiecemealGrowthPatternLanguage. Start building trust by starting small with FewRoles, and let this principle guide the OrganizationalStylePatternLanguage. To keep people from working defensively, one needs a team spirit; this is true ArchitectControlsProduct and subtending patterns relating to PeopleAndCodePatternLanguage. 

CommunityOfTrust provides a foundation for many other patterns, such as UnityOfPurpose, PatronRole FireWalls, DeveloperControlsProcess, ResponsibilitiesEngage, and more. 

So why is this a separate pattern? It has a specific structural impact: it is about nurturing communication paths, and has some positional impact (in particular, it encourages manager roles away from the center.) Second, the visible nature of the actions is important; we haven't captured that in any of the other patterns. 

Trust is contagious, and spreads most effectively through an organization from the top down.